package project02;

/*
    1. 돈은 자연수로 정의되며 100 이라는 숫자는 여기서 100원을 의미합니다.

    2. 뽑기 1회당 100원의 돈이 차감됩니다.
        즉, 200원을 고객이 사용하면, 뽑기 서비스는 총 2번의 뽑기 기회를 제공합니다.

    3. 고객은 "가상 지갑"에 돈을 충전할 수 있습니다.
        뽑기한 수 만큼 "가상 지갑"에서 돈이 차감됩니다.

    4. 뽑기의 결과는 "상품" 또는 "꽝"이 나올 수 있습니다.

    5. 상품의 재고 상한선은 없습니다.

    6. 상품은 유통기한이 있습니다. 유통기한이 지난 상품은 고객에게 제공할 수 없습니다.

    7. 상품에는 등급이 있습니다. A,B 등급으로 나뉩니다.
        뽑기 정책에 따라 A 또는 B 상품이 선택될 수 있습니다.

    8. A 상품은 90%의 확률, B 상품은 10%의 확률로 뽑힙니다.

    9. B 상품은 최대 3번까지만 뽑힙니다.

    10. A 상품의 확률을 먼저 확인하고 뽑히지 않는다면 B 상품의 뽑기를 시도 합니다.
         그래도 뽑히지 못하다면 "꽝"을 반환합니다.

    11. A, B 등급의 상품은 최소 2종류 이상 준비합니다.
* */

/*
    [ 고객의 입력 ]
    1. 고객은 DRAW 라는 함수를 호출합니다.

    2. DRAW 함수 호출시에는 원하는 "뽑기" 횟수와 시도한 시각을 파라미터로 입력 받습니다. 시각은 유통기한과 연관성이 있습니다.

    3. 고객에게 10,000원을 충전해 줍니다.
* */

/*
   [ 개발팀 요구사항 ]
   1. 상품은 총 10 종류를 개발자가 임의로 제공합니다.
    상품종류의 표현은 다음과 같습니다.
    [상품종류],[등급],[유통기한]
    예시)
    CHICKEN, B, 2023-03-23T{02:20:19+09:00
    CIDER, A, 2021-02-10T02:28:56+09:00
    COLA, A, 2021-03-21T01:00:32+09:00
    ...

    2. 상품은 문자열 Array 또는 파일이든 어떠한 형태로 제공이 되어도 관계 없습니다.

    3. "비지니스 팀 요구사항"에 충족되는지 확인하는 테스트 케이스가 필요합니다.
    각 케이스 별 고객의 입력과 개발자가 예상하는 결과를 이용하여 모든 테스트를 통과해야 합니다.
* */

import java.util.LinkedList;

public class Main {
    public static void main(String[] args) {
        Admin admin = new Admin();
        admin.inputProductCodes();
        LinkedList<Product> products = admin.getProducts();

        PoachingMachine poachingMachine = new PoachingMachine(products);
        poachingMachine.run();
    }
}
